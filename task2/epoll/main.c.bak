#include <arpa/inet.h>
#include <errno.h>
#include <fcntl.h>
#include <netdb.h>
#include <netinet/in.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <signal.h>
#include <sys/types.h>
#include <unistd.h>
#include <sys/epoll.h>
#include <sys/types.h>
#include <sys/socket.h>

#define PORT 80
#define MAXEVENTS 64

char webpage[] = "HTTP/1.1 200 OK\r\n"
                 "Content-Type: text/html; charset=UTF-8\r\n\r\n"
                 "<!DOCTYPE html>\r\n"
                 "<html><head><title>WebPage</title>\r\n"
                 "<style>body { background-color: #FFFF00 }</style></head>\r\n";



void sigint_handler(int signo) {
    printf("Shutting down...");
    exit(0);
}

int main(int argc, char *argv[]) {

    // disable buffering for stdout
    setbuf(stdout, NULL);

    // setup sigint handler
    signal(SIGINT, sigint_handler);

    printf("starting\n");
    
    struct sockaddr_in server_addr, client_addr;
    socklen_t sin_len = sizeof(client_addr);
    int fd_server, fd_client, s;
    struct epoll_event event;
    struct epoll_event *events;
    char buf[2048];
    int on = 1;

    fd_server = socket(AF_INET, SOCK_STREAM, 0);

    if (fd_server < 0) {
      perror("socket");
      exit(1);
    }
    printf("created socket\n");

    setsockopt(fd_server, SOL_SOCKET, SO_REUSEADDR, &on, sizeof(int)); 

    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = htonl(INADDR_ANY);
    server_addr.sin_port = htons(PORT); 

    if (bind(fd_server, (struct sockaddr *)&server_addr, sizeof(server_addr)) !=
      0) {
    perror("bind");
    exit(1);
    }

    printf("listening on port %d\n", PORT);

    if (listen(fd_server, 10000) != 0) 
    {
        perror("listen");
        exit(1);
    }

    int count = 0;


    int flags = fcntl (fd_server, F_GETFL, 0); // change socket fd to be non-blocking
    flags |= O_NONBLOCK;
    fcntl (fd_server, F_SETFL, flags);
    s = listen (fd_server, SOMAXCONN); // mark socket as passive socket type

    int efd = epoll_create1 (0); // create epoll instance

    if (efd == -1)
    {
        perror ("epoll_create");
        abort ();
    }

    
    event.data.fd = fd_server;
    event.events = EPOLLIN | EPOLLET; // just interested in read's events using edge triggered mode
    
    s = epoll_ctl (efd, EPOLL_CTL_ADD, fd_server, &event); // Add server socket FD to epoll's watched list
    if (s == -1)
    {
        perror ("epoll_ctl");
        abort ();
    }

    events = (struct epoll_event*) calloc (MAXEVENTS, sizeof(event));  


    while (1)
    {
	int n = epoll_wait(efd, events, MAXEVENTS, -1);
        fd_client = accept(fd_server, (struct sockaddr *)&client_addr, &sin_len);
        event.data.fd = fd_client;

        if (fd_client == -1) // error
        {
                if (errno == EAGAIN) {
        		break;
		} else {
                	perror ("accept");
                	break;
        	}
        }

        if (fd_client < 0) {
            perror("Can't connect...\n");
            continue;
        }
        
        for (int i = 0; i < n; i++)
        {
            memset(buf, 0, 2048);
            read(events[i].data.fd, buf, 2047);

            write(events[i].data.fd, webpage, sizeof(webpage) - 1);
        }

        close(fd_client);

    }

    free(events);
    close(efd);
    close(fd_server);

    return 0;
}
